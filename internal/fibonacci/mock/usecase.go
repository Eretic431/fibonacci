// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFibonacciUseCase is a mock of FibonacciUseCase interface.
type MockFibonacciUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFibonacciUseCaseMockRecorder
}

// MockFibonacciUseCaseMockRecorder is the mock recorder for MockFibonacciUseCase.
type MockFibonacciUseCaseMockRecorder struct {
	mock *MockFibonacciUseCase
}

// NewMockFibonacciUseCase creates a new mock instance.
func NewMockFibonacciUseCase(ctrl *gomock.Controller) *MockFibonacciUseCase {
	mock := &MockFibonacciUseCase{ctrl: ctrl}
	mock.recorder = &MockFibonacciUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFibonacciUseCase) EXPECT() *MockFibonacciUseCaseMockRecorder {
	return m.recorder
}

// GetSlice mocks base method.
func (m *MockFibonacciUseCase) GetSlice(ctx context.Context, from, to int) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlice", ctx, from, to)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlice indicates an expected call of GetSlice.
func (mr *MockFibonacciUseCaseMockRecorder) GetSlice(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlice", reflect.TypeOf((*MockFibonacciUseCase)(nil).GetSlice), ctx, from, to)
}
